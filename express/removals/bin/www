#!/usr/bin/env node

var command_line_flags = {
    '--build-data': false
};
var truthy = function(x) {
    if(typeof(x) == 'string'){
        x = x.toLowerCase();
    }
    var truthy = ['y','yes','true'];
    if(truthy.indexOf(x) > -1) {
        return true;
    }
    return false;
};

process.argv.forEach(function (val, index, array) {
  var arg_info = val.split('=');
  if(arg_info.length > 1){
    if(Object.keys(command_line_flags).indexOf(arg_info[0]) > -1) {
        command_line_flags[arg_info[0]] = truthy(arg_info[1]);
    }
  }
});

/*
example usage: ./bin/www --build-data=y 
to switch on the installFixtures() 
*/

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('removals:server');
var http = require('http');
var renderSass = require('../lib/render_sass').renderSass;
var installFixtures = require('../lib/install_fixtures').installFixtures;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log('Set port to ' + port);

/**
 * compile SASS
 */
renderSass('base.scss', 'style.css');

if(command_line_flags['--build-data']){
    console.log('installing fixtures...');
    installFixtures();
}

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = require('socket.io').listen(server);
require('../sockets')(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('listening on port ' + port);
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
