<?php

use Behat\Behat\Context\ClosuredContextInterface,
    Behat\Behat\Context\TranslatedContextInterface,
    Behat\Behat\Context\BehatContext,
    Behat\Behat\Exception\PendingException;
use Behat\Gherkin\Node\PyStringNode,
    Behat\Gherkin\Node\TableNode;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\HttpKernel\KernelInterface;
use Behat\Symfony2Extension\Context\KernelAwareInterface;
use Behat\MinkExtension\Context\MinkContext;
use GuzzleHttp\Client;

//
// Require 3rd-party libraries here:
//
//   require_once 'PHPUnit/Autoload.php';
//   require_once 'PHPUnit/Framework/Assert/Functions.php';
//

/**
 * Features context.
 */
class FeatureContext extends MinkContext implements KernelAwareInterface {

  public $_response;
  public $_client;
  private $kernel;
  private $parameters;
  private $urn;

  /**
   * Initializes context with parameters from behat.yml.
   *
   * @param array $parameters
   */
  public function __construct(array $parameters) {
    $this->parameters = $parameters;
  }

  /**
   * Sets HttpKernel instance.
   * This method will be automatically called by Symfony2Extension ContextInitializer.
   *
   * @param KernelInterface $kernel
   */
  public function setKernel(KernelInterface $kernel) {
    $this->kernel = $kernel;
  }

    /**
     * @When /^I type in (\d+) into the "([^"]*)" field$/
     */
    public function iTypeInIntoTheField($value, $field)
    {
        $field = $this->fixStepArgument($field);
        $value = $this->fixStepArgument($value);
        $this->getSession()->getPage()->fillField($field, $value);
    }

    /**
     * @Then /^I should see (\d+)$/
     */
    public function iShouldSee($text)
    {
        $this->assertSession()->pageTextContains($this->fixStepArgument($text));
    }

  /**
  * @When /^I check the "([^"]*)" radio button$/
  */
  public function iCheckTheRadioButton($radioLabel)
  {
        $radioButton = $this->getSession()->getPage()->findField($radioLabel);
        if (null === $radioButton) {
        throw new Exception('Cannot find radio button '.$radioLabel);
  }
    $value = $radioButton->getAttribute('value');
    $this->getSession()->getDriver()->click($radioButton->getXPath());
}

  /**
  * @Then /^Radio button with id "([^"]*)" should be checked$/
  */
  public function RadioButtonWithIdShouldBeChecked($sId)
  {
    $elementByCss = $this->getSession()->getPage()->find('css', 'input[type="radio"]:checked#'.$sId);
    if (!$elementByCss) {
        throw new Exception('Radio button with id ' . $sId.' is not checked');
    }
  }

   /**
    * @Given /^I request "([^"]*)"$/
    */
   public function iRequest($arg1)
   {
        $request = $this->_client->get($arg1);
        $this->_response = $request;
   }

}
